//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace App2
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::App2.App2_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::App2.App2_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::App2.App2_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace App2.App2_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::App2.App2_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::App2.App2_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[34];
            _typeNameTable[0] = "PerpetuumSoft.Controls.ColorToBrushConverter";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "PerpetuumSoft.Controls.RadialMenu";
            _typeNameTable[3] = "PerpetuumSoft.Controls.RadialMenuBase";
            _typeNameTable[4] = "PerpetuumSoft.Controls.RadialObject";
            _typeNameTable[5] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[6] = "System.Collections.ObjectModel.ObservableCollection`1<PerpetuumSoft.Controls.RadialItem>";
            _typeNameTable[7] = "System.Collections.ObjectModel.Collection`1<PerpetuumSoft.Controls.RadialItem>";
            _typeNameTable[8] = "PerpetuumSoft.Controls.RadialItem";
            _typeNameTable[9] = "PerpetuumSoft.Controls.RadialItemBase";
            _typeNameTable[10] = "Int32";
            _typeNameTable[11] = "Windows.UI.Xaml.Media.ImageSource";
            _typeNameTable[12] = "String";
            _typeNameTable[13] = "System.Windows.Input.ICommand";
            _typeNameTable[14] = "Boolean";
            _typeNameTable[15] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[16] = "PerpetuumSoft.Controls.MenuItemMode";
            _typeNameTable[17] = "System.Enum";
            _typeNameTable[18] = "System.ValueType";
            _typeNameTable[19] = "Double";
            _typeNameTable[20] = "PerpetuumSoft.Controls.RadialColorPicker";
            _typeNameTable[21] = "Windows.UI.Color";
            _typeNameTable[22] = "System.Collections.ObjectModel.ObservableCollection`1<PerpetuumSoft.Controls.RadialColorPickerItem>";
            _typeNameTable[23] = "System.Collections.ObjectModel.Collection`1<PerpetuumSoft.Controls.RadialColorPickerItem>";
            _typeNameTable[24] = "PerpetuumSoft.Controls.RadialColorPickerItem";
            _typeNameTable[25] = "PerpetuumSoft.Controls.RadialSlider";
            _typeNameTable[26] = "Windows.UI.Xaml.Media.DoubleCollection";
            _typeNameTable[27] = "App2.DrawingPage";
            _typeNameTable[28] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[29] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[30] = "App2.MainPage";
            _typeNameTable[31] = "App2.Sample1";
            _typeNameTable[32] = "App2.Sample2";
            _typeNameTable[33] = "App2.Storage";

            _typeTable = new global::System.Type[34];
            _typeTable[0] = typeof(global::PerpetuumSoft.Controls.ColorToBrushConverter);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::PerpetuumSoft.Controls.RadialMenu);
            _typeTable[3] = typeof(global::PerpetuumSoft.Controls.RadialMenuBase);
            _typeTable[4] = typeof(global::PerpetuumSoft.Controls.RadialObject);
            _typeTable[5] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[6] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::PerpetuumSoft.Controls.RadialItem>);
            _typeTable[7] = typeof(global::System.Collections.ObjectModel.Collection<global::PerpetuumSoft.Controls.RadialItem>);
            _typeTable[8] = typeof(global::PerpetuumSoft.Controls.RadialItem);
            _typeTable[9] = typeof(global::PerpetuumSoft.Controls.RadialItemBase);
            _typeTable[10] = typeof(global::System.Int32);
            _typeTable[11] = typeof(global::Windows.UI.Xaml.Media.ImageSource);
            _typeTable[12] = typeof(global::System.String);
            _typeTable[13] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[14] = typeof(global::System.Boolean);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[16] = typeof(global::PerpetuumSoft.Controls.MenuItemMode);
            _typeTable[17] = typeof(global::System.Enum);
            _typeTable[18] = typeof(global::System.ValueType);
            _typeTable[19] = typeof(global::System.Double);
            _typeTable[20] = typeof(global::PerpetuumSoft.Controls.RadialColorPicker);
            _typeTable[21] = typeof(global::Windows.UI.Color);
            _typeTable[22] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::PerpetuumSoft.Controls.RadialColorPickerItem>);
            _typeTable[23] = typeof(global::System.Collections.ObjectModel.Collection<global::PerpetuumSoft.Controls.RadialColorPickerItem>);
            _typeTable[24] = typeof(global::PerpetuumSoft.Controls.RadialColorPickerItem);
            _typeTable[25] = typeof(global::PerpetuumSoft.Controls.RadialSlider);
            _typeTable[26] = typeof(global::Windows.UI.Xaml.Media.DoubleCollection);
            _typeTable[27] = typeof(global::App2.DrawingPage);
            _typeTable[28] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[29] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[30] = typeof(global::App2.MainPage);
            _typeTable[31] = typeof(global::App2.Sample1);
            _typeTable[32] = typeof(global::App2.Sample2);
            _typeTable[33] = typeof(global::App2.Storage);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ColorToBrushConverter() { return new global::PerpetuumSoft.Controls.ColorToBrushConverter(); }
        private object Activate_2_RadialMenu() { return new global::PerpetuumSoft.Controls.RadialMenu(); }
        private object Activate_3_RadialMenuBase() { return new global::PerpetuumSoft.Controls.RadialMenuBase(); }
        private object Activate_4_RadialObject() { return new global::PerpetuumSoft.Controls.RadialObject(); }
        private object Activate_6_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::PerpetuumSoft.Controls.RadialItem>(); }
        private object Activate_7_Collection() { return new global::System.Collections.ObjectModel.Collection<global::PerpetuumSoft.Controls.RadialItem>(); }
        private object Activate_8_RadialItem() { return new global::PerpetuumSoft.Controls.RadialItem(); }
        private object Activate_9_RadialItemBase() { return new global::PerpetuumSoft.Controls.RadialItemBase(); }
        private object Activate_20_RadialColorPicker() { return new global::PerpetuumSoft.Controls.RadialColorPicker(); }
        private object Activate_22_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::PerpetuumSoft.Controls.RadialColorPickerItem>(); }
        private object Activate_23_Collection() { return new global::System.Collections.ObjectModel.Collection<global::PerpetuumSoft.Controls.RadialColorPickerItem>(); }
        private object Activate_24_RadialColorPickerItem() { return new global::PerpetuumSoft.Controls.RadialColorPickerItem(); }
        private object Activate_25_RadialSlider() { return new global::PerpetuumSoft.Controls.RadialSlider(); }
        private object Activate_27_DrawingPage() { return new global::App2.DrawingPage(); }
        private object Activate_30_MainPage() { return new global::App2.MainPage(); }
        private object Activate_31_Sample1() { return new global::App2.Sample1(); }
        private object Activate_32_Sample2() { return new global::App2.Sample2(); }
        private object Activate_33_Storage() { return new global::App2.Storage(); }
        private void VectorAdd_6_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::PerpetuumSoft.Controls.RadialItem>)instance;
            var newItem = (global::PerpetuumSoft.Controls.RadialItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_7_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::PerpetuumSoft.Controls.RadialItem>)instance;
            var newItem = (global::PerpetuumSoft.Controls.RadialItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_22_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::PerpetuumSoft.Controls.RadialColorPickerItem>)instance;
            var newItem = (global::PerpetuumSoft.Controls.RadialColorPickerItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_23_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::PerpetuumSoft.Controls.RadialColorPickerItem>)instance;
            var newItem = (global::PerpetuumSoft.Controls.RadialColorPickerItem)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::App2.App2_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::App2.App2_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  PerpetuumSoft.Controls.ColorToBrushConverter
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_ColorToBrushConverter;
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::App2.App2_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  PerpetuumSoft.Controls.RadialMenu
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("PerpetuumSoft.Controls.RadialMenuBase"));
                userType.Activator = Activate_2_RadialMenu;
                userType.SetContentPropertyName("PerpetuumSoft.Controls.RadialMenu.Items");
                userType.AddMemberName("Items");
                userType.AddMemberName("Content");
                userType.AddMemberName("Image");
                xamlType = userType;
                break;

            case 3:   //  PerpetuumSoft.Controls.RadialMenuBase
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("PerpetuumSoft.Controls.RadialObject"));
                userType.Activator = Activate_3_RadialMenuBase;
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("CenterRadiusFactor");
                userType.AddMemberName("RingRadiusFactor");
                userType.AddMemberName("SectorCount");
                xamlType = userType;
                break;

            case 4:   //  PerpetuumSoft.Controls.RadialObject
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_4_RadialObject;
                userType.AddMemberName("RingHoverBrush");
                userType.AddMemberName("RingBackgroundBrush");
                userType.AddMemberName("BodyBrush");
                userType.AddMemberName("RingActiveBrush");
                xamlType = userType;
                break;

            case 5:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::App2.App2_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  System.Collections.ObjectModel.ObservableCollection`1<PerpetuumSoft.Controls.RadialItem>
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<PerpetuumSoft.Controls.RadialItem>"));
                userType.CollectionAdd = VectorAdd_6_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  System.Collections.ObjectModel.Collection`1<PerpetuumSoft.Controls.RadialItem>
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_Collection;
                userType.CollectionAdd = VectorAdd_7_Collection;
                xamlType = userType;
                break;

            case 8:   //  PerpetuumSoft.Controls.RadialItem
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("PerpetuumSoft.Controls.RadialItemBase"));
                userType.Activator = Activate_8_RadialItem;
                userType.SetContentPropertyName("PerpetuumSoft.Controls.RadialItem.Submenu");
                userType.AddMemberName("Submenu");
                userType.AddMemberName("Image");
                userType.AddMemberName("Label");
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("IsChecked");
                userType.AddMemberName("ValueText");
                userType.AddMemberName("ValueBrush");
                userType.AddMemberName("Mode");
                userType.AddMemberName("GroupName");
                userType.AddMemberName("Content");
                userType.AddMemberName("CloseOnClick");
                xamlType = userType;
                break;

            case 9:   //  PerpetuumSoft.Controls.RadialItemBase
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_9_RadialItemBase;
                userType.AddMemberName("Index");
                userType.AddMemberName("ToolTip");
                userType.AddMemberName("ParentMenu");
                xamlType = userType;
                break;

            case 10:   //  Int32
                xamlType = new global::App2.App2_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Windows.UI.Xaml.Media.ImageSource
                xamlType = new global::App2.App2_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  String
                xamlType = new global::App2.App2_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  System.Windows.Input.ICommand
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  Boolean
                xamlType = new global::App2.App2_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::App2.App2_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  PerpetuumSoft.Controls.MenuItemMode
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::PerpetuumSoft.Controls.MenuItemMode.None);
                userType.AddEnumValue("RadioButton", global::PerpetuumSoft.Controls.MenuItemMode.RadioButton);
                userType.AddEnumValue("CheckBox", global::PerpetuumSoft.Controls.MenuItemMode.CheckBox);
                xamlType = userType;
                break;

            case 17:   //  System.Enum
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 18:   //  System.ValueType
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 19:   //  Double
                xamlType = new global::App2.App2_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  PerpetuumSoft.Controls.RadialColorPicker
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("PerpetuumSoft.Controls.RadialMenu"));
                userType.Activator = Activate_20_RadialColorPicker;
                userType.SetContentPropertyName("PerpetuumSoft.Controls.RadialMenu.Items");
                userType.AddMemberName("Color");
                userType.AddMemberName("ColorItems");
                xamlType = userType;
                break;

            case 21:   //  Windows.UI.Color
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  System.Collections.ObjectModel.ObservableCollection`1<PerpetuumSoft.Controls.RadialColorPickerItem>
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<PerpetuumSoft.Controls.RadialColorPickerItem>"));
                userType.CollectionAdd = VectorAdd_22_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  System.Collections.ObjectModel.Collection`1<PerpetuumSoft.Controls.RadialColorPickerItem>
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_23_Collection;
                userType.CollectionAdd = VectorAdd_23_Collection;
                xamlType = userType;
                break;

            case 24:   //  PerpetuumSoft.Controls.RadialColorPickerItem
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("PerpetuumSoft.Controls.RadialItemBase"));
                userType.Activator = Activate_24_RadialColorPickerItem;
                userType.SetContentPropertyName("PerpetuumSoft.Controls.RadialColorPickerItem.ColorItems");
                userType.AddMemberName("ColorItems");
                xamlType = userType;
                break;

            case 25:   //  PerpetuumSoft.Controls.RadialSlider
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("PerpetuumSoft.Controls.RadialMenuBase"));
                userType.Activator = Activate_25_RadialSlider;
                userType.AddMemberName("Nicks");
                userType.AddMemberName("Value");
                userType.AddMemberName("Image");
                userType.AddMemberName("Content");
                xamlType = userType;
                break;

            case 26:   //  Windows.UI.Xaml.Media.DoubleCollection
                xamlType = new global::App2.App2_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  App2.DrawingPage
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_27_DrawingPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::App2.App2_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::App2.App2_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  App2.MainPage
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_30_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  App2.Sample1
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_31_Sample1;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  App2.Sample2
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_Sample2;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  App2.Storage
                userType = new global::App2.App2_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_Storage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::PerpetuumSoft.Controls.PerpetuumSoft_Controls_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_RadialMenu_Items(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialMenu)instance;
            return that.Items;
        }
        private void set_0_RadialMenu_Items(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialMenu)instance;
            that.Items = (global::System.Collections.ObjectModel.ObservableCollection<global::PerpetuumSoft.Controls.RadialItem>)Value;
        }
        private object get_1_RadialItem_Submenu(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            return that.Submenu;
        }
        private void set_1_RadialItem_Submenu(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            that.Submenu = (global::PerpetuumSoft.Controls.RadialMenuBase)Value;
        }
        private object get_2_RadialItemBase_Index(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItemBase)instance;
            return that.Index;
        }
        private void set_2_RadialItemBase_Index(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItemBase)instance;
            that.Index = (global::System.Int32)Value;
        }
        private object get_3_RadialItem_Image(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            return that.Image;
        }
        private void set_3_RadialItem_Image(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            that.Image = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_4_RadialItem_Label(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            return that.Label;
        }
        private void set_4_RadialItem_Label(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            that.Label = (global::System.String)Value;
        }
        private object get_5_RadialItemBase_ToolTip(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItemBase)instance;
            return that.ToolTip;
        }
        private void set_5_RadialItemBase_ToolTip(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItemBase)instance;
            that.ToolTip = (global::System.String)Value;
        }
        private object get_6_RadialItem_Command(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            return that.Command;
        }
        private void set_6_RadialItem_Command(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_7_RadialItem_CommandParameter(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            return that.CommandParameter;
        }
        private void set_7_RadialItem_CommandParameter(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_8_RadialItem_IsChecked(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            return that.IsChecked;
        }
        private void set_8_RadialItem_IsChecked(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            that.IsChecked = (global::System.Boolean)Value;
        }
        private object get_9_RadialItem_ValueText(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            return that.ValueText;
        }
        private void set_9_RadialItem_ValueText(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            that.ValueText = (global::System.String)Value;
        }
        private object get_10_RadialItem_ValueBrush(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            return that.ValueBrush;
        }
        private void set_10_RadialItem_ValueBrush(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            that.ValueBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_11_RadialItem_Mode(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            return that.Mode;
        }
        private void set_11_RadialItem_Mode(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            that.Mode = (global::PerpetuumSoft.Controls.MenuItemMode)Value;
        }
        private object get_12_RadialItem_GroupName(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            return that.GroupName;
        }
        private void set_12_RadialItem_GroupName(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            that.GroupName = (global::System.String)Value;
        }
        private object get_13_RadialItem_Content(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            return that.Content;
        }
        private void set_13_RadialItem_Content(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_14_RadialItem_CloseOnClick(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            return that.CloseOnClick;
        }
        private void set_14_RadialItem_CloseOnClick(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItem)instance;
            that.CloseOnClick = (global::System.Boolean)Value;
        }
        private object get_15_RadialItemBase_ParentMenu(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItemBase)instance;
            return that.ParentMenu;
        }
        private void set_15_RadialItemBase_ParentMenu(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialItemBase)instance;
            that.ParentMenu = (global::PerpetuumSoft.Controls.RadialMenu)Value;
        }
        private object get_16_RadialObject_RingHoverBrush(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialObject)instance;
            return that.RingHoverBrush;
        }
        private void set_16_RadialObject_RingHoverBrush(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialObject)instance;
            that.RingHoverBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_17_RadialObject_RingBackgroundBrush(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialObject)instance;
            return that.RingBackgroundBrush;
        }
        private void set_17_RadialObject_RingBackgroundBrush(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialObject)instance;
            that.RingBackgroundBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_18_RadialObject_BodyBrush(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialObject)instance;
            return that.BodyBrush;
        }
        private void set_18_RadialObject_BodyBrush(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialObject)instance;
            that.BodyBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_19_RadialObject_RingActiveBrush(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialObject)instance;
            return that.RingActiveBrush;
        }
        private void set_19_RadialObject_RingActiveBrush(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialObject)instance;
            that.RingActiveBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_20_RadialMenu_Content(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialMenu)instance;
            return that.Content;
        }
        private void set_20_RadialMenu_Content(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialMenu)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_21_RadialMenu_Image(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialMenu)instance;
            return that.Image;
        }
        private void set_21_RadialMenu_Image(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialMenu)instance;
            that.Image = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_22_RadialMenuBase_IsOpen(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialMenuBase)instance;
            return that.IsOpen;
        }
        private object get_23_RadialMenuBase_CenterRadiusFactor(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialMenuBase)instance;
            return that.CenterRadiusFactor;
        }
        private void set_23_RadialMenuBase_CenterRadiusFactor(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialMenuBase)instance;
            that.CenterRadiusFactor = (global::System.Double)Value;
        }
        private object get_24_RadialMenuBase_RingRadiusFactor(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialMenuBase)instance;
            return that.RingRadiusFactor;
        }
        private void set_24_RadialMenuBase_RingRadiusFactor(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialMenuBase)instance;
            that.RingRadiusFactor = (global::System.Double)Value;
        }
        private object get_25_RadialMenuBase_SectorCount(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialMenuBase)instance;
            return that.SectorCount;
        }
        private void set_25_RadialMenuBase_SectorCount(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialMenuBase)instance;
            that.SectorCount = (global::System.Int32)Value;
        }
        private object get_26_RadialColorPicker_Color(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialColorPicker)instance;
            return that.Color;
        }
        private void set_26_RadialColorPicker_Color(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialColorPicker)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_27_RadialColorPicker_ColorItems(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialColorPicker)instance;
            return that.ColorItems;
        }
        private void set_27_RadialColorPicker_ColorItems(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialColorPicker)instance;
            that.ColorItems = (global::System.Collections.ObjectModel.ObservableCollection<global::PerpetuumSoft.Controls.RadialColorPickerItem>)Value;
        }
        private object get_28_RadialColorPickerItem_ColorItems(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialColorPickerItem)instance;
            return that.ColorItems;
        }
        private void set_28_RadialColorPickerItem_ColorItems(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialColorPickerItem)instance;
            that.ColorItems = (global::System.Collections.ObjectModel.ObservableCollection<global::PerpetuumSoft.Controls.RadialColorPickerItem>)Value;
        }
        private object get_29_RadialSlider_Nicks(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialSlider)instance;
            return that.Nicks;
        }
        private void set_29_RadialSlider_Nicks(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialSlider)instance;
            that.Nicks = (global::Windows.UI.Xaml.Media.DoubleCollection)Value;
        }
        private object get_30_RadialSlider_Value(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialSlider)instance;
            return that.Value;
        }
        private void set_30_RadialSlider_Value(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialSlider)instance;
            that.Value = (global::System.Int32)Value;
        }
        private object get_31_RadialSlider_Image(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialSlider)instance;
            return that.Image;
        }
        private void set_31_RadialSlider_Image(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialSlider)instance;
            that.Image = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_32_RadialSlider_Content(object instance)
        {
            var that = (global::PerpetuumSoft.Controls.RadialSlider)instance;
            return that.Content;
        }
        private void set_32_RadialSlider_Content(object instance, object Value)
        {
            var that = (global::PerpetuumSoft.Controls.RadialSlider)instance;
            that.Content = (global::System.Object)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::App2.App2_XamlTypeInfo.XamlMember xamlMember = null;
            global::App2.App2_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "PerpetuumSoft.Controls.RadialMenu.Items":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialMenu");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.ObjectModel.ObservableCollection`1<PerpetuumSoft.Controls.RadialItem>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_RadialMenu_Items;
                xamlMember.Setter = set_0_RadialMenu_Items;
                break;
            case "PerpetuumSoft.Controls.RadialItem.Submenu":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialItem");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "Submenu", "PerpetuumSoft.Controls.RadialMenuBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_RadialItem_Submenu;
                xamlMember.Setter = set_1_RadialItem_Submenu;
                break;
            case "PerpetuumSoft.Controls.RadialItemBase.Index":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialItemBase");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "Index", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_RadialItemBase_Index;
                xamlMember.Setter = set_2_RadialItemBase_Index;
                break;
            case "PerpetuumSoft.Controls.RadialItem.Image":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialItem");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "Image", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_RadialItem_Image;
                xamlMember.Setter = set_3_RadialItem_Image;
                break;
            case "PerpetuumSoft.Controls.RadialItem.Label":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialItem");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "Label", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_RadialItem_Label;
                xamlMember.Setter = set_4_RadialItem_Label;
                break;
            case "PerpetuumSoft.Controls.RadialItemBase.ToolTip":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialItemBase");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "ToolTip", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_RadialItemBase_ToolTip;
                xamlMember.Setter = set_5_RadialItemBase_ToolTip;
                break;
            case "PerpetuumSoft.Controls.RadialItem.Command":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialItem");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_RadialItem_Command;
                xamlMember.Setter = set_6_RadialItem_Command;
                break;
            case "PerpetuumSoft.Controls.RadialItem.CommandParameter":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialItem");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_RadialItem_CommandParameter;
                xamlMember.Setter = set_7_RadialItem_CommandParameter;
                break;
            case "PerpetuumSoft.Controls.RadialItem.IsChecked":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialItem");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "IsChecked", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_RadialItem_IsChecked;
                xamlMember.Setter = set_8_RadialItem_IsChecked;
                break;
            case "PerpetuumSoft.Controls.RadialItem.ValueText":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialItem");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "ValueText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_RadialItem_ValueText;
                xamlMember.Setter = set_9_RadialItem_ValueText;
                break;
            case "PerpetuumSoft.Controls.RadialItem.ValueBrush":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialItem");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "ValueBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_RadialItem_ValueBrush;
                xamlMember.Setter = set_10_RadialItem_ValueBrush;
                break;
            case "PerpetuumSoft.Controls.RadialItem.Mode":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialItem");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "Mode", "PerpetuumSoft.Controls.MenuItemMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_RadialItem_Mode;
                xamlMember.Setter = set_11_RadialItem_Mode;
                break;
            case "PerpetuumSoft.Controls.RadialItem.GroupName":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialItem");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "GroupName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_RadialItem_GroupName;
                xamlMember.Setter = set_12_RadialItem_GroupName;
                break;
            case "PerpetuumSoft.Controls.RadialItem.Content":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialItem");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_RadialItem_Content;
                xamlMember.Setter = set_13_RadialItem_Content;
                break;
            case "PerpetuumSoft.Controls.RadialItem.CloseOnClick":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialItem");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "CloseOnClick", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_RadialItem_CloseOnClick;
                xamlMember.Setter = set_14_RadialItem_CloseOnClick;
                break;
            case "PerpetuumSoft.Controls.RadialItemBase.ParentMenu":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialItemBase");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "ParentMenu", "PerpetuumSoft.Controls.RadialMenu");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_RadialItemBase_ParentMenu;
                xamlMember.Setter = set_15_RadialItemBase_ParentMenu;
                break;
            case "PerpetuumSoft.Controls.RadialObject.RingHoverBrush":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialObject");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "RingHoverBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_RadialObject_RingHoverBrush;
                xamlMember.Setter = set_16_RadialObject_RingHoverBrush;
                break;
            case "PerpetuumSoft.Controls.RadialObject.RingBackgroundBrush":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialObject");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "RingBackgroundBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_RadialObject_RingBackgroundBrush;
                xamlMember.Setter = set_17_RadialObject_RingBackgroundBrush;
                break;
            case "PerpetuumSoft.Controls.RadialObject.BodyBrush":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialObject");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "BodyBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_RadialObject_BodyBrush;
                xamlMember.Setter = set_18_RadialObject_BodyBrush;
                break;
            case "PerpetuumSoft.Controls.RadialObject.RingActiveBrush":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialObject");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "RingActiveBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_RadialObject_RingActiveBrush;
                xamlMember.Setter = set_19_RadialObject_RingActiveBrush;
                break;
            case "PerpetuumSoft.Controls.RadialMenu.Content":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialMenu");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_RadialMenu_Content;
                xamlMember.Setter = set_20_RadialMenu_Content;
                break;
            case "PerpetuumSoft.Controls.RadialMenu.Image":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialMenu");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "Image", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_RadialMenu_Image;
                xamlMember.Setter = set_21_RadialMenu_Image;
                break;
            case "PerpetuumSoft.Controls.RadialMenuBase.IsOpen":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialMenuBase");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.Getter = get_22_RadialMenuBase_IsOpen;
                xamlMember.SetIsReadOnly();
                break;
            case "PerpetuumSoft.Controls.RadialMenuBase.CenterRadiusFactor":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialMenuBase");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "CenterRadiusFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_RadialMenuBase_CenterRadiusFactor;
                xamlMember.Setter = set_23_RadialMenuBase_CenterRadiusFactor;
                break;
            case "PerpetuumSoft.Controls.RadialMenuBase.RingRadiusFactor":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialMenuBase");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "RingRadiusFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_RadialMenuBase_RingRadiusFactor;
                xamlMember.Setter = set_24_RadialMenuBase_RingRadiusFactor;
                break;
            case "PerpetuumSoft.Controls.RadialMenuBase.SectorCount":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialMenuBase");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "SectorCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_RadialMenuBase_SectorCount;
                xamlMember.Setter = set_25_RadialMenuBase_SectorCount;
                break;
            case "PerpetuumSoft.Controls.RadialColorPicker.Color":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialColorPicker");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_RadialColorPicker_Color;
                xamlMember.Setter = set_26_RadialColorPicker_Color;
                break;
            case "PerpetuumSoft.Controls.RadialColorPicker.ColorItems":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialColorPicker");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "ColorItems", "System.Collections.ObjectModel.ObservableCollection`1<PerpetuumSoft.Controls.RadialColorPickerItem>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_RadialColorPicker_ColorItems;
                xamlMember.Setter = set_27_RadialColorPicker_ColorItems;
                break;
            case "PerpetuumSoft.Controls.RadialColorPickerItem.ColorItems":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialColorPickerItem");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "ColorItems", "System.Collections.ObjectModel.ObservableCollection`1<PerpetuumSoft.Controls.RadialColorPickerItem>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_RadialColorPickerItem_ColorItems;
                xamlMember.Setter = set_28_RadialColorPickerItem_ColorItems;
                break;
            case "PerpetuumSoft.Controls.RadialSlider.Nicks":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialSlider");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "Nicks", "Windows.UI.Xaml.Media.DoubleCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_RadialSlider_Nicks;
                xamlMember.Setter = set_29_RadialSlider_Nicks;
                break;
            case "PerpetuumSoft.Controls.RadialSlider.Value":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialSlider");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "Value", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_RadialSlider_Value;
                xamlMember.Setter = set_30_RadialSlider_Value;
                break;
            case "PerpetuumSoft.Controls.RadialSlider.Image":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialSlider");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "Image", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_RadialSlider_Image;
                xamlMember.Setter = set_31_RadialSlider_Image;
                break;
            case "PerpetuumSoft.Controls.RadialSlider.Content":
                userType = (global::App2.App2_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PerpetuumSoft.Controls.RadialSlider");
                xamlMember = new global::App2.App2_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_RadialSlider_Content;
                xamlMember.Setter = set_32_RadialSlider_Content;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::App2.App2_XamlTypeInfo.XamlSystemBaseType
    {
        global::App2.App2_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::App2.App2_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::App2.App2_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::App2.App2_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}



